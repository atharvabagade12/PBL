#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10

typedef struct {
    int pid;          
    int arrival;   
    int burst;        
    int remaining;   
    int waiting;     
    int turnaround;  
} Process;

void sortByArrival(Process p[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i].arrival > p[j].arrival) {
                Process temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
}


void SJF_Preemptive(Process p[], int n) {
    int completed = 0, currentTime = 0, minRemainingTime, shortest;
    bool found;

    while (completed != n) {
        minRemainingTime = __INT_MAX__;
        shortest = -1;
        found = false;

        // Find the process with the shortest remaining time among those that have arrived
        for (int i = 0; i < n; i++) {
            if (p[i].arrival <= currentTime && p[i].remaining > 0 && p[i].remaining < minRemainingTime) {
                minRemainingTime = p[i].remaining;
                shortest = i;
                found = true;
            }
        }

        if (!found) {
            currentTime++;
            continue;
        }

        p[shortest].remaining--;
        currentTime++;

        // If process is finished, calculate waiting and turnaround times
        if (p[shortest].remaining == 0) {
            completed++;
            p[shortest].turnaround = currentTime - p[shortest].arrival;
            p[shortest].waiting = p[shortest].turnaround - p[shortest].burst;
        }
    }
}


void RoundRobin(Process p[], int n, int quantum) {
    int currentTime = 0, completed = 0;
    bool done;
    
    while (completed < n) {
        done = true;

        for (int i = 0; i < n; i++) {
            if (p[i].arrival <= currentTime && p[i].remaining > 0) {
                done = false;
                if (p[i].remaining > quantum) {
                    currentTime += quantum;
                    p[i].remaining -= quantum;
                } else {
                    currentTime += p[i].remaining;
                    p[i].waiting = currentTime - p[i].arrival - p[i].burst;
                    p[i].turnaround = currentTime - p[i].arrival;
                    p[i].remaining = 0;
                    completed++;
                }
            }
        }

        if (done)
            currentTime++;
    }
}

void display(Process p[], int n) {
    printf("PID\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].arrival, p[i].burst, p[i].waiting, p[i].turnaround);
    }
}

int main() {
    Process p[MAX_PROCESSES];
    int n, choice, quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &p[i].arrival, &p[i].burst);
        p[i].remaining = p[i].burst;
    }

    printf("Choose Scheduling Algorithm:\n1. SJF (Preemptive)\n2. Round Robin\nChoice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        sortByArrival(p, n);
        SJF_Preemptive(p, n);
    } else if (choice == 2) {
        printf("Enter the time quantum: ");
        scanf("%d", &quantum);
        sortByArrival(p, n);
        RoundRobin(p, n, quantum);
    } else {
        printf("Invalid choice.\n");
        return 1;
    }

    display(p, n);
    return 0;
}
